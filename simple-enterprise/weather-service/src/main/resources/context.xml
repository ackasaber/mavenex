<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <!-- Only one property-placeholder per XML file works.
         Therefore, both property files are listed together.  -->
    <context:property-placeholder location="classpath:jdbc.properties,classpath:openweathermap.properties" />

    <!-- Configure Spring Data JPA with the embedded database. -->
    <bean id="dataSource"
          class="org.apache.commons.dbcp2.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!-- Configure the entity manager factory bean -->
    <bean id="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
        <!-- Spring Data JPA will create the persistence unit based on entities
             defined in this Java package. -->
        <property name="packagesToScan" value="mavenbook.enterprise.entities" />
    </bean>

    <!-- Configure the transaction manager bean. -->
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <!-- Instrument transaction handling into @Transactional beans. -->
    <tx:annotation-driven/>

    <!-- Injects weatherReportDao and locationDao repository beans into the context. -->
    <jpa:repositories base-package="mavenbook.enterprise.repositories" />
    
    <!-- Configure the Apache HttpClient with defaults. -->
    <bean id="httpClientBuilder"
          class="org.apache.http.impl.client.HttpClientBuilder"
          factory-method="create" />
    
    <bean id="httpClient"
          factory-bean="httpClientBuilder"
          factory-method="build" />
    
    <!-- Configure the OpenWeatherMap weather provider. -->
    <bean id="openWeatherMapProvider"
          class="mavenbook.enterprise.openweathermap.OpenWeatherMapProvider">
        <constructor-arg name="appID" value="${openweathermap.appid}" />
        <constructor-arg name="httpClient" ref="httpClient" />
    </bean>
    
    <!-- Configure the weather service. -->
    <bean id="weatherService"
          class="mavenbook.enterprise.WeatherService"
          autowire="constructor" />
</beans>